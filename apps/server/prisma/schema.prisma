generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true) @map("is_active")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group[]
  Member    Member[]
  invite    Invite[]
  List      List[]
  Item      Item[]

  @@map("accounts")
}

enum Status {
  ACTIVE
  INACTIVE
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  status      Status   @default(ACTIVE)
  ownerId     Int      @map("owner_id")
  createdAt   DateTime @default(now())

  owner  Account  @relation(fields: [ownerId], references: [id])
  Member Member[]
  invite Invite[]
  List   List[]

  @@map("groups")
}

enum Role {
  Lider
  Organizador
  Participante
  Observador
}

model Member {
  accountId Int
  groupId   Int
  role      Role

  account Account @relation(fields: [accountId], references: [id])
  group   Group   @relation(fields: [groupId], references: [id])

  @@unique([accountId, groupId])
  @@index([accountId])
  @@map("members")
}

enum InviteStatus {
  Accepted
  Rejected
  Canceled
  Pending
}

model Invite {
  id             Int          @id @default(autoincrement())
  groupId        Int          @map("group_id")
  createdBy      Int          @map("created_by") // Quem criou o convite
  recipientEmail String       @map("recipient_email") // E-mail do destinatário
  role           Role         @default(Observador) // Papel no grupo
  status         InviteStatus @default(Pending) // Status do convite
  expiresAt      DateTime?    @map("expires_at") // Validade do convite
  createdAt      DateTime     @default(now()) @map("created_at") // Data de criação
  updatedAt      DateTime     @updatedAt @map("updated_at") // Última atualização

  // Relacionamentos
  createdByAccount Account @relation(fields: [createdBy], references: [id]) // Relaciona quem criou
  group            Group   @relation(fields: [groupId], references: [id]) // Grupo associado

  // Índices para consultas rápidas
  @@index([groupId])
  @@index([recipientEmail])
  @@index([status])
  @@map("invites")
}

model List {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String?  @db.Text
  groupId     Int      @map("group_id")
  ownerId     Int      @map("owner_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  owner Account @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  items Item[]

  @@unique([groupId, title])
  @@index([groupId])
  @@map("lists")
}

enum ItemStatus {
  pending
  processing
  done
}

enum ItemPriority {
  high
  low
  medium
}

model Item {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(200)
  description String?      @db.Text
  status      ItemStatus   @default(pending)
  priority    ItemPriority @default(medium)
  listId      Int
  assignedId  Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  list     List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  assigned Account? @relation(fields: [assignedId], references: [id], onDelete: SetNull)

  @@unique([listId, title])
  @@index([listId, assignedId])
  @@map("items")
}
